{"version":3,"sources":["store/types.ts","components/Circle.tsx","components/MessWrapper.tsx","components/svgs/IconCheck.tsx","components/svgs/IcoError.tsx","components/svgs/IconTrophy.tsx","components/ui/Button.tsx","screens/Sucess.tsx","screens/Error.tsx","screens/CompleteSuccess.tsx","images/depressed.svg","screens/CompleteFail.tsx","screens/SelectCount.tsx","store/reducer.ts","store/index.tsx","screens/QuestionErrors.tsx","store/StoreAction.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EActionTypes","Circle","num","className","id","data-progress","Infinity","MessWrapper","text","style","padding","IconCheck","version","xmlns","x","y","viewBox","d","IcoError","IconTrophy","fill","width","height","cx","cy","r","points","opacity","Button","onClick","classes","title","type","Success","onClickNext","Error","uri","href","target","rel","CompleteSuccess","CompleteFail","goToErrors","maxErrorsCount","isDemo","src","IconFail","alt","options","value","label","SelectCount","onSubmit","React","useState","selected","setSelected","defaultValue","onChange","reducer","state","action","SET_LOADING","loading","payload","SET_QUESTIONS","SET_ANSWER","answers","answer","initialState","isbad_text","isok_text","questions","questionsCount","Store","createContext","store","dispatch","StoreProvider","props","useReducer","Provider","children","QuestionErrors","useContext","errors","setErrors","useEffect","filteredAnswers","filter","itm","istrue","storeQuestions","forEach","innerItm","question","push","console","log","map","index","name","answ","StoreAction","setLoading","setQuestions","setQuestionsCount","setAnswer","this","App","setMaxErrorsCount","isStepCount","setIsStepCount","isErrorScreen","setIsErrorScreen","questionCount","setQuestionCount","showSuccessScreen","setShowSuccessScreen","showErrorScreen","setShowErrorScreen","isComSuc","setIsComSuc","isComFail","setIsComFail","error","setError","currentQuestion","setCurrentQuestion","a","Axios","get","process","resp","data","sort","Math","random","length","nextQhandler","sucCount","checkQuestions","oldV","val","url","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80f16dee.chunk.js","sourcesContent":["export interface TAnswer {\n  id: string;\n  name: string;\n  istrue: boolean;\n  question_id: string;\n}\n\nexport interface TUserAnswer {\n  question: TQuestion['id'];\n  answer: TAnswer;\n}\nexport interface TQuestion {\n  answers: TAnswer[];\n  id: number;\n  name: string;\n  url: string;\n}\nexport interface IState {\n  isbad_text: string;\n  isok_text: string;\n  questions: TQuestion[] | null;\n  questionsCount: number;\n  answers: TUserAnswer[];\n  readonly errors?: string | undefined;\n  readonly loading: boolean;\n}\nexport interface IAction {\n  type: string;\n  payload: any;\n}\nexport interface IStore {\n  store: IState;\n  dispatch: IAction | any;\n}\n\nexport enum EActionTypes {\n  SET_QUESTIONS = 'SET_QUESTIONS',\n  SET_QUESTIONS_COUNT = 'SET_QUESTIONS',\n\n  SET_LOADING = 'SET_LOADING',\n\n  SET_ANSWER = 'SET_ANSWER',\n\n  OPEN_MODAL = 'OPEN_MODAL',\n  CLOSE_MODAL = 'CLOSE_MODAL',\n  RESET_MODAL = 'RESET_MODAL',\n}\n","import React from 'react';\nimport './Circle.scss';\n\ninterface CircleProps {\n  num: number;\n}\n\nexport const Circle: React.FC<CircleProps> = ({ num }) => {\n  return (\n    <div className='progress-circle' id='circle' data-progress={num === Infinity ? 0 : num}></div>\n  );\n};\n","import React from 'react';\n\ninterface MessWrapperProps {\n  text: string;\n}\n\nexport const MessWrapper: React.FC<MessWrapperProps> = ({ text }) => {\n  return (\n    <div style={{ padding: '20px' }}>\n      <p>{text}</p>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const IconCheck: React.FC = () => {\n  return (\n    <svg\n      version='1.1'\n      id='Capa_1'\n      xmlns='http://www.w3.org/2000/svg'\n      x='0px'\n      y='0px'\n      viewBox='0 0 30.258 30.258'\n    >\n      <g>\n        <path\n          d='M15.129,0C6.773,0,0,6.772,0,15.13c0,8.354,6.773,15.128,15.129,15.128s15.129-6.773,15.129-15.128\n\t\tC30.258,6.772,23.484,0,15.129,0z M15.129,27.854c-7.027,0-12.725-5.697-12.725-12.726c0-7.026,5.697-12.725,12.725-12.725\n\t\ts12.727,5.698,12.727,12.725C27.855,22.156,22.156,27.854,15.129,27.854z'\n        />\n        <path\n          d='M25.854,9.989l-1.762-1.762c-0.322-0.324-0.85-0.324-1.172,0L12.361,18.786l-5.023-5.061\n\t\tc-0.324-0.323-0.848-0.323-1.174,0l-1.76,1.761c-0.324,0.322-0.324,0.851,0,1.175l5.586,5.626l0.016,0.025l1.219,1.219l0.283,0.281\n\t\tl0.26,0.262c0.322,0.32,0.85,0.32,1.174,0l12.912-12.912C26.178,10.839,26.178,10.312,25.854,9.989z'\n        />\n      </g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport const IcoError: React.FC = () => {\n  return (\n    <svg version='1.1' id='Capa_1' x='0px' y='0px' viewBox='0 0 340.8 340.8'>\n      <g>\n        <g>\n          <path\n            d='M170.4,0C76.4,0,0,76.4,0,170.4s76.4,170.4,170.4,170.4s170.4-76.4,170.4-170.4S264.4,0,170.4,0z M170.4,323.6\n\t\t\tc-84.4,0-153.2-68.8-153.2-153.2S86,17.2,170.4,17.2S323.6,86,323.6,170.4S254.8,323.6,170.4,323.6z'\n          />\n        </g>\n      </g>\n      <g>\n        <g>\n          <path\n            d='M182.4,169.6l50-50c3.2-3.2,3.2-8.8,0-12c-3.2-3.2-8.8-3.2-12,0l-50,50l-50-50c-3.2-3.2-8.8-3.2-12,0\n\t\t\tc-3.2,3.2-3.2,8.8,0,12l50,50l-50,49.6c-3.2,3.2-3.2,8.8,0,12c1.6,1.6,4,2.4,6,2.4s4.4-0.8,6-2.4l50-50l50,50c1.6,1.6,4,2.4,6,2.4\n\t\t\ts4.4-0.8,6-2.4c3.2-3.2,3.2-8.8,0-12L182.4,169.6z'\n          />\n        </g>\n      </g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport const IconTrophy: React.FC = () => {\n  return (\n    <svg\n      version='1.1'\n      id='Capa_1'\n      xmlns='http://www.w3.org/2000/svg'\n      x='0px'\n      y='0px'\n      viewBox='0 0 512 512'\n    >\n      <g>\n        <path\n          style={{ fill: '#F4AB40' }}\n          d='M330.408,256h-16.656c-4.912,0-9.552-2.256-12.592-6.112c-3.024-3.872-4.128-8.912-2.96-13.68\n\t\tl39.984-164C339.928,65.056,346.36,60,353.736,60h72.224c17.696,0,34.128,7.984,45.072,21.904s14.8,31.776,10.608,48.992\n\t\tl-1.904,7.808C462.888,207.76,401.496,256,330.408,256z M366.296,92l-32.16,131.936c54.688-1.648,101.456-39.344,114.496-92.816\n\t\tl1.904-7.824c1.856-7.6,0.144-15.472-4.672-21.632C441.032,95.52,433.784,92,425.96,92H366.296z'\n        />\n        <path\n          style={{ fill: '#F4AB40' }}\n          d='M32.264,138.704l-1.904-7.808c-4.192-17.216-0.336-35.072,10.608-48.992S68.328,60,86.04,60h72.224\n\t\tc7.376,0,13.792,5.04,15.552,12.208l39.984,164c1.168,4.784,0.064,9.808-2.96,13.68c-3.056,3.856-7.696,6.112-12.608,6.112h-16.656\n\t\tC110.488,256,49.096,207.76,32.264,138.704z M86.04,92c-7.824,0-15.072,3.536-19.904,9.664c-4.832,6.16-6.528,14.032-4.688,21.632\n\t\tl1.904,7.824c13.024,53.472,59.808,91.168,114.496,92.816L145.688,92H86.04z'\n        />\n      </g>\n      <path\n        style={{ fill: '#FFCC5B' }}\n        d='M120.616,32.064v131.984c0,43.312,20.256,81.872,51.872,106.624\n\tc28.048,21.952,43.52,56.176,38.064,91.376l-0.016,0.096h90.912c-5.568-35.28,9.968-69.584,38.064-91.632\n\tc31.536-24.752,51.856-63.232,51.856-106.448v-132H120.616z'\n      />\n      <path\n        style={{ fill: '#F4AB40' }}\n        d='M379.288,362.032H132.696c-6.672,0-12.08,5.408-12.08,12.08s5.408,12.08,12.08,12.08h246.592\n\tc6.672,0,12.08-5.408,12.08-12.08S385.96,362.032,379.288,362.032z'\n      />\n      <path\n        style={{ fill: '#6F7070' }}\n        d='M379.288,487.84H132.696c-6.672,0-12.08,5.408-12.08,12.08s5.408,12.08,12.08,12.08h246.592\n\tc6.672,0,12.08-5.408,12.08-12.08S385.96,487.84,379.288,487.84z'\n      />\n      <rect x='138.712' y='386.24' style={{ fill: '#464646' }} width='234.56' height='101.632' />\n      <path\n        style={{ fill: '#E99D38' }}\n        d='M393.768,0H118.216c-8.848,0-16.032,7.184-16.032,16.032l0,0c0,8.848,7.184,16.032,16.032,16.032\n\th275.536c8.848,0,16.032-7.184,16.032-16.032l0,0C409.8,7.184,402.616,0,393.768,0z'\n      />\n      <path\n        style={{ fill: '#404040' }}\n        d='M224.936,487.84c4.208,0,7.616-3.408,7.616-7.616s-3.408-7.616-7.616-7.616h-15.984\n\tc-3.52,0-6.384-2.88-6.368-6.4v-0.08c0-0.16,0-0.304-0.016-0.464c-0.208-3.472,2.544-6.384,6.016-6.384h24.272\n\tc4.128,0,7.808-3.088,8.032-7.2c0.224-4.384-3.264-8.016-7.6-8.016h-14.96c-3.536,0-6.4-2.88-6.384-6.416V437.2v-0.096\n\tc-0.016-3.728,3.008-6.768,6.72-6.768h32.192c4.128,0,7.808-3.088,8.032-7.2c0.224-4.384-3.264-8.016-7.6-8.016h-46.24\n\tc-3.68,0-6.416-3.088-6.368-6.768c0-0.032,0-0.064,0-0.096s0-0.064,0-0.096c-0.048-3.68,2.704-6.768,6.368-6.768h12.944\n\tc4.128,0,7.808-3.088,8.032-7.2c0.224-4.384-3.264-8.016-7.6-8.016h-79.712v101.632h86.224V487.84z'\n      />\n      <path\n        style={{ fill: '#F8BC50' }}\n        d='M121.032,144.048c0,11.152,9.04,20.208,20.208,20.208c11.152,0,20.208-9.04,20.208-20.208V117.6\n\tc0-9.344,7.648-16.944,16.992-16.896h0.224c0.416,0,0.832-0.016,1.232-0.032c9.216-0.56,16.976,6.752,16.976,15.984v48.48\n\tc0,10.944,8.192,20.752,19.12,21.328c11.648,0.608,21.296-8.656,21.296-20.176v-39.776c0-9.392,7.648-16.992,17.04-16.944h1.168\n\th0.24c9.888-0.064,17.968,7.984,17.968,17.856v53.472c0,10.944,8.192,20.752,19.12,21.328c11.648,0.608,21.296-8.656,21.296-20.176\n\tv-74.8c0-9.76,8.208-17.04,17.968-16.928c0.08,0,0.16,0,0.24,0s0.16,0,0.24,0c9.76-0.112,17.968,7.168,17.968,16.928v18.368\n\tc0,10.944,8.192,20.752,19.12,21.328c11.648,0.608,21.296-8.656,21.296-20.176V32.064h-269.92V144.048z'\n      />\n      <g>\n        <circle style={{ fill: '#FDBC4B' }} cx='323.608' cy='437.024' r='20.032' />\n        <circle style={{ fill: '#FDBC4B' }} cx='255.992' cy='437.024' r='20.032' />\n        <circle style={{ fill: '#FDBC4B' }} cx='188.376' cy='437.024' r='20.032' />\n      </g>\n      <polygon\n        style={{ fill: '#E95454' }}\n        points='236.712,146.304 199.048,119.2 161.4,146.304 161.4,32.064 236.712,32.064 '\n      />\n      <g style={{ opacity: 0.1 }}>\n        <rect x='121.032' y='32' style={{ fill: '#010101' }} width='269.904' height='14.752' />\n      </g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n      <g></g>\n    </svg>\n  );\n};\n","import React from 'react';\n\ninterface ButtonProps {\n  onClick: () => void;\n  classes?: string;\n  title?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  onClick,\n  classes,\n  title = 'Наступне запитання',\n}) => {\n  return (\n    <button type='button' className={`tda__btn ${classes || ''}`} onClick={onClick}>\n      {title}\n    </button>\n  );\n};\n","import React from 'react';\nimport { IconCheck } from '../components/svgs';\nimport { Button } from '../components/ui';\n\ninterface SuccessProps {\n  onClickNext: () => void;\n}\nexport const Success: React.FC<SuccessProps> = ({ onClickNext }) => {\n  return (\n    <div className='tda__questionResult tda__questionResult--success'>\n      <IconCheck />\n      <h2>Правильно !</h2>\n      <Button onClick={onClickNext} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { IcoError } from '../components/svgs';\nimport { Button } from '../components/ui';\n\ninterface ErrorProps {\n  onClickNext: () => void;\n  uri: string;\n}\n\nexport const Error: React.FC<ErrorProps> = ({ onClickNext, uri }) => {\n  return (\n    <div className='tda__questionResult tda__questionResult--error'>\n      <IcoError />\n      <h2>Помилка :(</h2>\n      <div className='tda__screenBtnWrapper'>\n        <a\n          href={uri}\n          target='_blank'\n          rel='noreferrer'\n          className='tda__btn tda__btn--blue tda__mr-3'\n        >\n          Підглянути відповідь\n        </a>\n        <Button onClick={onClickNext} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { IconTrophy } from '../components/svgs';\n\ninterface CompleteSuccessProps {}\n\nexport const CompleteSuccess: React.FC<CompleteSuccessProps> = () => {\n  return (\n    <div className='tda__successScreen'>\n      <IconTrophy />\n      <h2>\n        Вітаємо! Тест складено! <br /> Ви — на крок ближче до перемоги у конкурсі\n      </h2>\n\n      <a href='/' className='tda__btn'>\n        На головну\n      </a>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/depressed.1ba22a16.svg\";","import React from 'react';\nimport IconFail from '../images/depressed.svg';\nimport { Button } from '../components/ui';\n\ninterface CompleteFailProps {\n  goToErrors: () => void;\n  maxErrorsCount: number;\n  isDemo?: boolean;\n}\n\nexport const CompleteFail: React.FC<CompleteFailProps> = ({\n  goToErrors,\n  maxErrorsCount,\n  isDemo,\n}) => {\n  return (\n    <div className='tda__faildScreen'>\n      <img src={IconFail} alt='IconFail' />\n      <h2>\n        Тест не складено. <br /> Не здавайтесь! <br />\n      </h2>\n      {isDemo ? (\n        <p>\n          Спробуйте скласти ще раз, або отримайте повний доступ до тренажера, <br /> щоб бути на\n          крок ближче до перемоги у конкурсі.\n        </p>\n      ) : (\n        <p>Ви зробили більше {maxErrorsCount} помилок. Почитайте книжку \"Директор на всі 200\"</p>\n      )}\n      <div className='tda__screenBtnWrapper tda__mt-2'>\n        <Button\n          onClick={goToErrors}\n          title='Переглянути помилки'\n          classes='tda__btn--blue tda__mr-3'\n        />\n        <a href='/' className='tda__btn'>\n          Перескласти\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport Select from 'react-select';\nimport { Button } from '../components/ui';\n\nconst options = [\n  { value: '30', label: '30 питань' },\n  { value: '40', label: '40 питань' },\n  { value: '50', label: '50 питань' },\n  { value: '200', label: 'усі 200 питань' },\n];\n\ninterface SelectCountProps {\n  onSubmit: (val: number) => void;\n}\n\nexport const SelectCount: React.FC<SelectCountProps> = ({ onSubmit }) => {\n  const [selected, setSelected] = React.useState<typeof options[0]>(options[0]);\n  return (\n    <div className='tda__selectCountScreen'>\n      <p>Оберіть кількість запитань у тесті :</p>\n      <Select\n        className='tda__select'\n        options={options}\n        defaultValue={options[0]}\n        style={{ width: '300px' }}\n        onChange={(label) => setSelected(label as typeof options[0])}\n      />\n      <div className='tda__mt-2'>\n        <Button onClick={() => onSubmit(+selected.value)} title='Почати' />\n      </div>\n    </div>\n  );\n};\n","import { IState, IAction, EActionTypes } from './types';\n\nexport default function reducer(state: IState, action: IAction): IState {\n  switch (action.type) {\n    case EActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload.loading,\n      };\n    case EActionTypes.SET_QUESTIONS:\n      return {\n        ...state,\n        ...action.payload,\n        loading: false,\n      };\n    case EActionTypes.SET_ANSWER:\n      return {\n        ...state,\n        answers: [...state.answers, action.payload.answer],\n      };\n\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { IState, IStore } from './types';\nimport reducer from './reducer';\n\nconst initialState: IState = {\n  isbad_text: '',\n  isok_text: '',\n  answers: [],\n  questions: null,\n  questionsCount: 0,\n  loading: true,\n};\n\nexport const Store = React.createContext<IStore>({\n  store: initialState,\n  dispatch: {\n    type: '',\n    payload: null,\n  },\n});\n\nexport function StoreProvider(props: any): JSX.Element {\n  const [store, dispatch] = React.useReducer(reducer, initialState);\n  return <Store.Provider value={{ store, dispatch }}>{props.children}</Store.Provider>;\n}\n","import React from 'react';\nimport { Store } from '../store';\nimport { TAnswer, TQuestion } from '../store/types';\n\ninterface QuestionErrorsProps {}\n\ninterface TGroup {\n  question: TQuestion;\n  answer: TAnswer;\n}\n\nexport const QuestionErrors: React.FC<QuestionErrorsProps> = () => {\n  const { store } = React.useContext(Store);\n  const [errors, setErrors] = React.useState<TGroup[]>([]);\n\n  React.useEffect(() => {\n    if (store.questions) {\n      const filteredAnswers = store.answers.filter((itm) => !itm.answer.istrue);\n      const storeQuestions: TGroup[] = [];\n      store.questions.forEach((itm) => {\n        filteredAnswers.forEach((innerItm) => {\n          if (innerItm.question === itm.id) {\n            return storeQuestions.push({\n              answer: innerItm.answer,\n              question: itm,\n            });\n          }\n          return null;\n        });\n      });\n      setErrors(storeQuestions);\n      console.log('errors', storeQuestions);\n    }\n  }, [store]);\n  return (\n    <div className='tda__questionErrorScreen'>\n      {errors.map((itm, index) => {\n        return (\n          <div key={itm.question.id}>\n            <h4>\n              {index + 1}. {itm.question.name}\n            </h4>\n            <ul>\n              {itm.question.answers.map((answ) => {\n                return (\n                  <li key={answ.id} className={itm.answer.id === answ.id ? 'tda__error-list' : ''}>\n                    {answ.name}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import { IAction, TQuestion, EActionTypes, IState, TUserAnswer } from './types';\n\nexport default class StoreAction {\n  dispatch: IAction | any;\n  constructor(dispatch: IAction | any) {\n    this.dispatch = dispatch;\n  }\n\n  setLoading = (payload: { loading: boolean }) =>\n    this.dispatch({\n      type: EActionTypes.SET_LOADING,\n      payload,\n    });\n  setQuestions = (payload: {\n    questions: TQuestion[] | null;\n    isbad_text: IState['isbad_text'];\n    isok_text: IState['isok_text'];\n    questionsCount: IState['questionsCount'];\n  }) =>\n    this.dispatch({\n      type: EActionTypes.SET_QUESTIONS,\n      payload,\n    });\n\n  setQuestionsCount = (payload: { count: number }) =>\n    this.dispatch({\n      type: EActionTypes.SET_QUESTIONS,\n      payload,\n    });\n  setAnswer = (payload: { answer: TUserAnswer }) =>\n    this.dispatch({\n      type: EActionTypes.SET_ANSWER,\n      payload,\n    });\n}\n","import Axios from 'axios';\nimport React from 'react';\nimport './App.scss';\nimport { Circle } from './components/Circle';\nimport { MessWrapper } from './components/MessWrapper';\nimport {\n  CompleteFail,\n  CompleteSuccess,\n  ErrorScreen,\n  QuestionErrors,\n  SelectCount,\n  SuccessScreen,\n} from './screens';\nimport { Store } from './store';\nimport StoreAction from './store/StoreAction';\nimport { TUserAnswer } from './store/types';\nfunction App() {\n  const { store, dispatch } = React.useContext(Store);\n\n  const [maxErrorsCount, setMaxErrorsCount] = React.useState(3);\n  const [isStepCount, setIsStepCount] = React.useState(true);\n  const [isErrorScreen, setIsErrorScreen] = React.useState(false);\n\n  const [questionCount, setQuestionCount] = React.useState(3);\n\n  const [loading, setLoading] = React.useState(true);\n  const [showSuccessScreen, setShowSuccessScreen] = React.useState(false);\n  const [showErrorScreen, setShowErrorScreen] = React.useState(false);\n  const [isComSuc, setIsComSuc] = React.useState(false);\n  const [isComFail, setIsComFail] = React.useState(false);\n\n  const [error, setError] = React.useState<string | null>(null);\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n\n  React.useEffect(() => {\n    if (!store.questions) {\n      (async () => {\n        try {\n          const resp = await Axios.get(`${process.env.REACT_APP_API_URI}/exec/test_train.php`);\n          new StoreAction(dispatch).setQuestions({\n            questions: resp?.data?.questions.sort(() => Math.random() - 0.5) || [],\n            isbad_text: resp?.data?.isbad_text || '',\n            isok_text: resp?.data?.isok_text || '',\n            questionsCount: (resp?.data?.questions[0] && resp?.data?.questions.length) || 1,\n          });\n        } catch (error) {\n          console.log('App -> error', error);\n          setError(`Помилка, зв'яжіться з адміниістратором`);\n        }\n        setLoading(false);\n      })();\n    }\n  }, [store, dispatch]);\n\n  React.useEffect(() => {\n    console.log(store);\n  }, [store]);\n\n  const answerHandler = (data: TUserAnswer) => {\n    const { answer } = data;\n    if (answer.istrue) setShowSuccessScreen(true);\n    else setShowErrorScreen(true);\n    new StoreAction(dispatch).setAnswer({ answer: data });\n  };\n\n  const checkQuestions = () => {\n    const suc = store.answers.filter((itm) => itm.answer.istrue);\n    const sucCount = suc.length;\n    if (questionCount === 3 && sucCount < 3) {\n      setMaxErrorsCount(1);\n      return setIsComFail(true);\n    }\n    if (questionCount === 15 && sucCount < 7) {\n      setMaxErrorsCount(15 - 7);\n      return setIsComFail(true);\n    }\n    if (questionCount === 30 && sucCount < 21) {\n      setMaxErrorsCount(30 - 21);\n      return setIsComFail(true);\n    }\n    if (questionCount === 40 && sucCount < 28) {\n      setMaxErrorsCount(40 - 28);\n      return setIsComFail(true);\n    }\n    if (questionCount === 50 && sucCount < 35) {\n      setMaxErrorsCount(50 - 35);\n      return setIsComFail(true);\n    }\n    if (questionCount === 200 && sucCount < 140) {\n      setMaxErrorsCount(200 - 140);\n\n      return setIsComFail(true);\n    }\n    return setIsComSuc(true);\n  };\n  const nextQhandler = () => {\n    if (store.questionsCount - 1 <= currentQuestion) {\n      checkQuestions();\n    } else {\n      setCurrentQuestion((oldV) => oldV + 1);\n    }\n  };\n\n  if (loading) return <MessWrapper text='Зачекайте ...' />;\n\n  if (isErrorScreen) {\n    return <QuestionErrors />;\n  }\n\n  if (isStepCount) {\n    return (\n      <SelectCount\n        onSubmit={(val) => {\n          if (store.questionsCount < val) {\n            setQuestionCount(3);\n          } else setQuestionCount(val);\n          setIsStepCount(false);\n        }}\n      />\n    );\n  }\n  if (isComFail) {\n    return (\n      <CompleteFail maxErrorsCount={maxErrorsCount} goToErrors={() => setIsErrorScreen(true)} />\n    );\n  }\n\n  if (isComSuc) {\n    return <CompleteSuccess />;\n  }\n\n  if (showErrorScreen) {\n    const uri =\n      store.questions && store.questions[0] ? store.questions[currentQuestion]?.url || '' : '';\n    return (\n      <ErrorScreen\n        uri={uri}\n        onClickNext={() => {\n          nextQhandler();\n          setShowErrorScreen(false);\n        }}\n      />\n    );\n  }\n\n  if (showSuccessScreen) {\n    return (\n      <SuccessScreen\n        onClickNext={() => {\n          nextQhandler();\n          setShowSuccessScreen(false);\n        }}\n      />\n    );\n  }\n\n  if (store.questions) {\n    return (\n      <div>\n        <div className='tda__wrapper'>\n          <div className='tda__circleTextWrapper'>\n            <Circle num={+((currentQuestion / store.questionsCount) * 100).toFixed()} />\n            <span>\n              {currentQuestion + 1} з {store.questionsCount}\n            </span>\n          </div>\n          <div className='tda__testQWrapper'>\n            <h5>{store && store.questions[currentQuestion].name}</h5>\n            <ul>\n              {store.questions[currentQuestion].answers.map((itm, index) => (\n                <li\n                  key={itm.id}\n                  onClick={() =>\n                    answerHandler({\n                      question: (store.questions && store.questions[currentQuestion].id) || 0,\n                      answer: itm,\n                    })\n                  }\n                >\n                  <b>{index + 1}.</b> {itm.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) return <MessWrapper text={error} />;\n\n  return <MessWrapper text='нема питань' />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StoreProvider } from './store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <StoreProvider>\n    <div className='tda'>\n      <App />\n    </div>\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}